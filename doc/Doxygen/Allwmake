#!/bin/sh
# ==============================================================================
# Script: Allwmake
#
# Description:
#   Automates the generation of Doxygen documentation from test case README.md
#   files. It uses Pandoc to convert Markdown files into styled HTML, then
#   post-processes the result using Python scripts to produce `.dox` files
#   compatible with Doxygen. A master index is also created automatically.
#
# Functionality:
#   - Converts all README.md files in the test directory to HTML
#   - Applies a MathJax-compatible template
#   - Generates `.dox` pages from the HTML using a Python post-processor
#   - Creates index pages for Doxygen navigation
#   - Runs Doxygen to produce the final documentation site
#
# Requirements:
#   - OpenFOAM environment sourced (WM_PROJECT_DIR must be set)
#   - Tools: pandoc, doxygen, python3
#
# Usage:
#   ./Allwmake
#
# Author: Hélio Ribeiro Neto
# Date  : [2025-04-14]
# ==============================================================================

# ------------------------------------------------------------------------------
# ✅ Check if the OpenFOAM environment is loaded
# ------------------------------------------------------------------------------
if [ -z "$WM_PROJECT_DIR" ]; then
    echo "❌ Environment variable WM_PROJECT_DIR is not set."
    echo "   Please run 'source etc/bashrc' or equivalent before proceeding."
    exit 1
fi

# ------------------------------------------------------------------------------
# ✅ Check for required tools
# ------------------------------------------------------------------------------
command -v pandoc >/dev/null || { echo "❌ Pandoc not found. Please install it."; exit 1; }
command -v doxygen >/dev/null || { echo "❌ Doxygen not found. Please install it."; exit 1; }

# ------------------------------------------------------------------------------
# 📍 Ensure we are in the script’s own directory
# ------------------------------------------------------------------------------
cd "${0%/*}" || exit 1

# Enable command echoing (optional for debugging)
set -x

echo "🧪 [DOC] Generating Doxygen pages for test cases..."

# ------------------------------------------------------------------------------
# 📁 Configuration
# ------------------------------------------------------------------------------
TEMPLATE="style/mathjax-template.html"   # Pandoc HTML template with MathJax support
DOXYFILE="Doxyfile"                      # Doxygen configuration file
TEST_DIR="../../tests"                   # Root test directory
DOX_CASES_DIR="doc/pages"                # Directory where .dox files will be written

# Create output directory if it doesn't exist
mkdir -p "$DOX_CASES_DIR"

# ------------------------------------------------------------------------------
# 🔄 Loop through all test README.md files
# ------------------------------------------------------------------------------
find "$TEST_DIR" -type f -name README.md | while read -r README; do
    # 📌 Extract metadata from directory structure
    test_dir=$(dirname "$README")
    test_name=$(basename "$test_dir")
    test_parent=$(basename "$(dirname "$test_dir")")
    clean_path=$(echo "$test_dir" | sed 's|\.\./||g')
    page_id=$(echo "$clean_path" | tr '/' '_')
    dox_file="${DOX_CASES_DIR}/${test_parent}_${test_name}.dox"

    echo "📄 Processing ${test_parent}/${test_name} → page ID: ${page_id}"

    # 🔁 Convert Markdown to HTML using Pandoc with custom template
    html_fragment=$(pandoc "$README" --to=html --template="$TEMPLATE")

    # 🧠 Generate the final .dox page using Python post-processing
    python3 generate_doxygen_page_from_html.py "$html_fragment" "$dox_file" "$page_id"
done

# ------------------------------------------------------------------------------
# 🧩 Generate master index pages
# ------------------------------------------------------------------------------
python3 generate_dox_indexes.py "$TEST_DIR" "$DOX_CASES_DIR"

# ------------------------------------------------------------------------------
# 📘 Run Doxygen to produce the final documentation
# ------------------------------------------------------------------------------
echo "📘 Running Doxygen..."
doxygen "$DOXYFILE" || { echo "❌ Doxygen execution failed."; exit 1; }

echo "✅ Documentation generated successfully."
